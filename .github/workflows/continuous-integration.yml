name: Java CI

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest

    services:
      gititdone_db:
        image: postgres:latest
        env:
          POSTGRES_HOST: ${POSTGRES_HOST}
          POSTGRES_USER: ${POSTGRES_USER}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${POSTGRES_DB}
          POSTGRES_PORT: ${POSTGRES_PORT}
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U ${POSTGRES_USER}"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Wait for PostgreSQL to be ready
        env:
          POSTGRES_HOST: ${POSTGRES_HOST}
          POSTGRES_USER: ${POSTGRES_USER}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${POSTGRES_DB}
          POSTGRES_PORT: ${POSTGRES_PORT}
        run: |
          for i in {1..10}; do
            if pg_isready -h ${POSTGRES_HOST} -p ${POSTGRES_PORT} -U ${POSTGRES_USER}; then
              echo "PostgreSQL is ready"
              break
            fi
            echo "Waiting for PostgreSQL..."
            sleep 5
          done

      - name: Install dependencies
        run: mvn install -DskipTests

      - name: Run Linting (Checkstyle)
        run: mvn checkstyle:check
        continue-on-error: true

      - name: Run unit tests
        env:
          POSTGRES_HOST: ${POSTGRES_HOST}
          POSTGRES_USER: ${POSTGRES_USER}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${POSTGRES_DB}
          POSTGRES_PORT: ${POSTGRES_PORT}
        run: mvn test

      - name: Build with Maven
        run: mvn package

      - name: Build Docker Image
        run: docker build -t javeexd/gamestore-app .

      - name: Push Docker Image
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        run: |
          echo "${DOCKER_PASSWORD}" | docker login -u "${DOCKER_USERNAME}" --password-stdin
          docker push javeexd/gamestore-app
